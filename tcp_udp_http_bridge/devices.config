//
// Configuration for known tracking devices for TCP and UDP communication
// ======================================================================
//
// This is mainly in JSON format ("key", value pairs), but with comment lines "//" and some special keywords (see below)
//
// TEST YOUR REGULAR EXPRESSIONS ON regex101.com for an example message
// DUPLICATE EACH "\" AFTER THE EXPRESSION WORKS
//
// More docs below the table ...
//
[
// ------------  TK103_H02 ---------------------------------------------
        {
            "Device":   "TK103B-H02",
            "Login":    {"msg":"",                              "resp":""},
            "Heartbeat":    {"msg":"^\\*\\w{2},(\\d{15}),XT,[V|A]*,([0-9]+),([0-9]+)#\\s*$",    "resp":""},
            "Gps_data":     {
                "msg":  "^\\*\\w{2},([0-9]{15}),V1,%REGEXP_GPRMC%,.*$",          "resp":"",
                "Order":    [       %DEVIMEI%,        %GPRMC% ],
                "Units":    [        %NONE%,           %NONE% ]
            }
        },
// ------------  END TK103_H02 ------------------------------------------
// ------------  TK105 ---------------------------------------------
        {
            "Device":   "TK105 - binary data",
            "Login":        {
//                  "msg":"",                              "resp":""
// response requests every 30sec the location for 10 times  
                "msg":  "^\\*(\\w{2}),([0-9]{10}),V1,%REGEXP_GPRMC%,.*$",          "resp":"*\\S1\\,\\DEVID\\,D1,\\TIME\\,30,20#",
//                "msg":  "^\\*(\\w{2}),([0-9]{10}),V1,%REGEXP_GPRMC%,.*$",          "resp":"*\\S1\\,\\DEVID\\,S17,\\TIME\\,30#",
                "Order":  [    %S1%,   %DEVID%,      %GPRMC% ]
            },
            "Heartbeat":    {
                "msg":  "^\\*\\w{2},([0-9]{10}),V19,%REGEXP_GPRMC%,.*$",          "resp":"",
                "msg1": "^\\*\\w{2},([0-9]{10}),V4,D1,.*$",          "resp1":""
//                "msg1": "^\\*\\w{2},([0-9]{10}),V4,S17,.*$",          "resp1":""
            },
            "Gps_data":     {
                "Mode": "bcd",
//                "msg":  "^\\*(\\w{2}),([0-9]{10}),V1,%REGEXP_GPRMC%,.*$",          "resp":"",
                "msg":  "^24([0-9]{10})([0-9]{6})([0-9]{6})([0-9]{9})[[:xdigit:]]([0-9]{9})((([[:xdigit:]])))([0-9]{3})([0-9]{3}).*$",          "resp":"",
                "Order":   [  %DEVID%,  %TIME%,    %DATE%,    %LAT%,               %LON%,  %ACTIVE%,%NS%,%EW%, %SPEED%, %ANGLE%],
                "Units":   [  %NONE%,   %NONE%,    %NONE%,   %DEGMIN%,            %DEGMIN%,     %NONE%, %NONE%,%NONE%,%KNOTS%, %DEGREE%],
                "Scale":   [      1,      1,         1,       1E-5,                1E-4,          1,     1,       1,      1,     1 ],
                        //                                   1/100000              1/10000                     
                "Bits": { "pat": [ "",   "",        "",       "",                   "",          "2",   "4",   "8",     "",   ""],
                        //                                                                 mask: bit1 , bit2, bit3
                          "res": [ "",   "",        "",       "",                   "",         "A:V", "N:S", "E:W",    "",   ""]
                        }

            }
        },
// ------------  END TK105 ------------------------------------------

// ------------ GPS-logger for Android APP via UDP -------------------
        {
            "Device":   "GPS Logger (UDP)",
            "Login":        {"msg":"",                              "resp":""},
            "Heartbeat":    {"msg":"",                              "resp":""},
            "Gps_data":     {
                "msg":  "^\\w+\\/(\\w+)\\/\\$GPRMC,%REGEXP_GPRMC%,.*\\*\\w{2}\\s*$",             "resp":"",
                "Order":    [   %DEVID%,                %GPRMC% ],
                "Units":    [   %NONE%,             %NONE% ]
                //                       user   devid       GPRMC record          GPRMC-checksum
                //example data: uabcde/Y0xXyY/$GPRMC,180725,A,5637.37477,N,1211.26495,E,0.000000,0.000000,021017,,*20
            }
        },
// ----------- END GPS-logger ----------------------------------------

// ------------ Modified GPS-logger for Android APP via UDP (altitude added) -------------------
        {
            "Device":   "GPS Logger (UDP w/ altitude)",
            "Login":        {"msg":"",                              "resp":""},
            "Heartbeat":    {"msg":"",                              "resp":""},
            "Gps_data":     {
                "msg":  "^\\w+\\/(\\w+)\\/\\$GPRMC,%REGEXP_GPRMC%,.*alt=([0-9.]+).*$",           "resp":"",
                "Order":    [     %DEVID%,            %GPRMC%,           %ALT% ],
                "Units":    [     %NONE%, %NONE%, %NONE% ]
                //                       user   devid           GPRMC record       altitude
                //example data: uabcde/Y0xXyY/$GPRMC,180725,A,5637.37477,N,1211.26495,E,0.000000,0.000000,021017,,*20,alt=100.5
            }
        },
// ----------- END GPS-logger ----------------------------------------

// ------------ MQTT Bridge -------------------
        {
            "Device":       "MQTT Logger via bridge",
            "Login":        {"msg":"",                                                              "resp":""},
            "Heartbeat":    {"msg":"",                                                              "resp":""},
            "Gps_data":     {
                "msg":  "^(\\w+)\\/([0-9]{6}),([0-9]{6}),([0-9.]+),([0-9.]+),([0-9.]+),([0-9.]+),([0-9.]+)$",                      "resp":"",
                "Order": [ %DEVID%,  %DATE%,   %TIME%,     %LAT%,    %LON%,    %ALT%,    %SPEED%,   %ACC%],
                "Units": [ %NONE%,   %NONE%,   %NONE%,    %DEGREE%, %DEGREE%,  %NONE%,   %KMPERH%,  %NONE%]
            }
        },
// ----------- END MQTT ----------------------------------------

// ------------ GT06 Message type 0x12 and 0x22 ----------------------------
        {
            "Device":       "GT06-Tracker",
            "Mode":         "binary",
            "Login":        {
                "msg":  "^78780D010([0-9]{15})[[:xdigit:]]{8}0D0A$",     "resp":"787805010001D9DC0D0A",
                "Order":        [ %DEVIMEI% ]
            },
            "Heartbeat":    {"msg":"^78780A13[[:xdigit:]]{18}0D0A$",                "resp":"787805130001E9F10D0A"},
            "Gps_data":     {
                "msg":  "^78782222([[:xdigit:]]{6})([[:xdigit:]]{6})[[:xdigit:]]{2}([[:xdigit:]]{8})([[:xdigit:]]{8})([[:xdigit:]]{2})(((([[:xdigit:]]{2})))[[:xdigit:]]{2}).*0D0A$",     "resp": "78780522000135830D0A",
                "msg1": "^78781F12([[:xdigit:]]{6})([[:xdigit:]]{6})[[:xdigit:]]{2}([[:xdigit:]]{8})([[:xdigit:]]{8})([[:xdigit:]]{2})(((([[:xdigit:]]{2})))[[:xdigit:]]{2}).*0D0A$",     "resp1":"787805120001B32D0D0A",
                "Order":        [      %DATE%,         %TIME%,                           %LAT%,             %LON%,       %SPEED%,         %ANGLE%,    %NS%,  %EW%, %ACTIVE% ],
                //                                                                                                                   Angle: matches 2 bytes; NS,EW, ACTIVE: the same single first byte 
                "Units":        [      %INV%,          %NONE%,                           %DEGREE%,          %DEGREE%,    %KMPERH%,       %DEGREE%, %NONE%, %NONE%, %NONE% ],
                "Scale":        [      1,              1,                               5.5555555E-7,     5.5555555E-7,  1,              1,         1,      1,     1 ],
                        //                                                              1/30000/60                      
                "Bits": { "pat": [      "",             "",                              "",               "",            "",            "3ff",     "4",   "8"  ,   "10"],
                        //                                                                                                   mask: lower 10bits ,  bit2,  bit3,   bit 4
                          "res": [      "",             "",                              "",               "",            "",              "",     "N:S",  "W:E",  "A:V"]
                        //                                                                                                     result    angle  ,  bit set ? "N" else "S"
                        }
            }
        },
// --------- END GT06  ------------------------------------------------

// ------------ TK103 ------------------------------------------------
//      {
//          "Device":       "TK103-untested and incomplete",
//          "Login":        {"msg":"^\\((\\d{12})(BP05)([A-Z0-9.]*)\\).*$",         "resp":"%DATENOW%%NOW%AP05HSO",
//          "Heartbeat":    {"msg":"",                              "resp":""},
//          "Gps_data":     {
//              "msg":"^\\((\\d{12})(B[A-Z]\\d{2})([A-Z0-9.]*)\\).*$",     "resp":""},
//              "Order":        [           %DEVID%,  %NONE%,       %GPRMC%],
//              "Units":        [           %NONE%,   %NONE%,       %NONE%]
//          }
//      },
// --------- END TK103 ------------------------------------------------

// ------------ LAST ENTRY - DO NOT REMOVE ---------------------------
        {
            "Device":""
        }
// ------------ END OF LIST ------------------------------------------
]
// ------------------------------------------- Documentation ----------------------------------------------
//
// Device:  name of device (string)
// Mode:    "ascii", "binary" or "bcd". Default is "ascii"
//          "binary": values are encoded as a real binary number. ID/IMEI are BCD
//          "bcd":  all values are encoded as a binary coded decimals
//
// Three regular expression patterns ("msg:") are needed per device, but can be empty. All regular expression are evaluated case insensitive!
// Login    : login message of device. Default: "msg":"", "resp":""
// Heartbeat    : heartbeat message of the device. Default:  "msg":"", "resp":""
// Gps_data     : the actual message containing GPS data. "msg": and "resp":
//
// For each message type a, currently static, response (e.g. "resp":"OK") can be entered
//
// For each type a set of Order, Units and Scale can be added. This makes only sense, if regex groups are defined
// Order:   Array of int - assign the corresponding parameter to the matched pattern (regexp group) as a keyword (see below). The keywords are replaced automatically. 
//          Example: for a login message the device ID (%DEVID%) can be extracted. For GPS data the latitude %LAT%,longitude %LON% etc has to be specified
// Units:   Array of int - for each parameter which is defined in "Order", the unit of the parameter has to be defined as a keyword(e.g. %DEGREE%)or %NONE%
// Scale:   Array of floats - Parameters might have been scaled in order to fit into the data format. This scaling has to be inverted. The scale value is a float value.
//          Example: an integer is send, but represents the latitude in minutes*30000. Unit can be given as %DEGREE% and the scaling would be 1/30000/60=5.5555555E-7
//                   This inverts the factor 30000 and scales minutes to degree
// Bits:    Mask bits and extract string/value 
//          pat: array of strings - hex number to mask bits (e.g. "3ff")
//          res: array of strings - result of the operation (true:false). Give two string separated by ":" (e.g. "N:S"). Empty string, if the value should be used directly
//          Hint: in order to apply different bit masks to the same byte, you need to capture the same regexp group multiple times:
//                Byte captured once ([[:xdigit:]]{2})
//                Byte captured twice (([[:xdigit:]]{2})) etc. 
//                Test your pattern at regex101.com
//
//
// The GPS data record is described by a regular expresssion
// Each match in the regular expression has to be accompanied by an Order and Units list. If the device sends a GPRMC record, the %GPRMC% keyword can be used.
//
// ALL KEYWORDS HAVE TO BE ENCLOSED IN "%", e.g. %DEVIMEI% for the device IMEI number
//
// Allowed Keywords:
// REGEXP_GPRMC : regular expression for the standard GPRMC record w/o $GPRMC header, magnetic deviation and check sum (from TIME up to DATE)
//                "([0-9]{6},[A|V]*,[0-9.]+,[N|S],[0-9.]+,[E|W],[0-9.]+,[0-9.]+,[0-9]{6})"
// "Order": [       TIME,   ACTIVE,  LAT,    NS,   LON,    EW,   SPEED,  ANGLE,   DATE]
// "Units": [       NONE,    NONE,  DEGMIN, NONE, DEGMIN, NONE,  KNOTS, DEGREE,   NONE]
//
// DEVIMEI  : device IMEI number
// DEVID    : device ID defined in the HTTP interface and provided by device
// ACTIVE   : A or V (active or void) entry
// LAT      : latitude
// NS       : N or S (North or South)
// LON      : longitude
// EW       : E or W (East or West)
// SPEED    : current speed
// ANGLE    : angle of movement
// TIME     : time (HHMMSS)
// DATE     : date (DDMMYY) - for inverse date (YYMMDD) set units to "INV"
// ALT      : altitude
// ACC      : accuracy/precision of location
// BITS     : bits need to be analysed. Requires additional Bits block (see above)
//
// Units:
// DEGMIN   : format of lat/lon  in degree*100 + minutes (GPRMC format)
// DEGREE   : format of lat/lon/angle  in degree
// KMPERH   : speed in km/h
// MPERS    : speed in m/s
// KNOTS    : speed in knots
// INV      : invert order (e.g. DATE YYMMDD)
